<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<!-- ====================================================================== 
     Doom Tools Build File    
     Matt Tropiano                                                                
     ====================================================================== -->
<project name="build" default="compile">

	<description>Doom Tools</description>

	<property file="build.properties" />
	<property file="versions.properties" />

	<!-- Dependencies -->
	<property name="dev.base" value=".." />
	<property name="S" value="${path.separator}" />
	<property name="dist.dir" value="dist" />

	<!-- Project Libs -->
	<property name="doom.lib.version" value="2.14.2" />
	<property name="doom.tag" value="${doom.lib.version}-RELEASE" />
	<property name="doom.project" value="doomstruct-${doom.lib.version}" />	
	<property name="doom.jar" value="${doom.project}.jar" />
	<property name="doom.jar.src" value="${doom.project}-sources.jar" />

	<property name="json.lib.version" value="1.2.0" />
	<property name="json.tag" value="${json.lib.version}-RELEASE" />
	<property name="json.project" value="blackrook-json-${json.lib.version}" />	
	<property name="json.jar" value="${json.project}.jar" />
	<property name="json.jar.src" value="${json.project}-sources.jar" />

	<property name="rookscript.lib.version" value="1.15.0" />
	<property name="rookscript.tag" value="${rookscript.lib.version}-RELEASE" />
	<property name="rookscript.project" value="blackrook-rookscript-${rookscript.lib.version}" />	
	<property name="rookscript.jar" value="${rookscript.project}.jar" />
	<property name="rookscript.jar.src" value="${rookscript.project}-sources.jar" />

	<property name="rookscript.desktop.lib.version" value="1.10.2.1" />
	<property name="rookscript.desktop.tag" value="${rookscript.desktop.lib.version}-RELEASE" />
	<property name="rookscript.desktop.project" value="blackrook-rookscript-desktop-${rookscript.desktop.lib.version}" />	
	<property name="rookscript.desktop.jar" value="${rookscript.desktop.project}.jar" />
	<property name="rookscript.desktop.jar.src" value="${rookscript.desktop.project}-sources.jar" />

	<property name="flatlaf.lib.version" value="2.0.2" />
	<property name="flatlaf.jar" value="flatlaf-${flatlaf.lib.version}.jar" />

	<property name="rsyntaxtextarea.lib.version" value="3.3.2" />
	<property name="rsyntaxtextarea.jar" value="rsyntaxtextarea-${rsyntaxtextarea.lib.version}.jar" />

	<property name="autocomplete.lib.version" value="3.3.0" />
	<property name="autocomplete.jar" value="autocomplete-${autocomplete.lib.version}.jar" />

	<property name="commonmark.lib.version" value="0.19.0" />
	<property name="commonmark.jar" value="commonmark-${commonmark.lib.version}.jar" />

	<property name="jsoup.lib.version" value="1.15.3" />
	<property name="jsoup.jar" value="jsoup-${jsoup.lib.version}.jar" />
	
	
	<!-- Project Info -->
	<property name="project.archive" value="doomtools" />
	<property name="project.javadoc.title" value="DoomTools" />
	<property name="project.classpath" value="${dev.base}/${json.jar}${S}${dev.base}/${doom.jar}${S}${dev.base}/${rookscript.jar}${S}${dev.base}/${rookscript.desktop.jar}${S}${dev.base}/${rsyntaxtextarea.jar}${S}${dev.base}/${autocomplete.jar}${S}${dev.base}/${flatlaf.jar}${S}${dev.base}/${commonmark.jar}${S}${dev.base}/${jsoup.jar}"/>
	<property name="project.compiler.bootclasspath" value="" />
	<property name="project.testclass" value=""/>
	<property name="project.testclass.main" value=""/>
	<property name="project.javadoc.packages" value="
		net.mtrop.doom.tools,
		net.mtrop.doom.tools.common,
		net.mtrop.doom.tools.decohack,
		net.mtrop.doom.tools.decohack.contexts,
		net.mtrop.doom.tools.decohack.data,
		net.mtrop.doom.tools.decohack.data.enums,
		net.mtrop.doom.tools.decohack.patches,
		net.mtrop.doom.tools.doomfetch,
		net.mtrop.doom.tools.doommake,
		net.mtrop.doom.tools.doommake.functions,
		net.mtrop.doom.tools.doommake.generators,
		net.mtrop.doom.tools.doomtools,
		net.mtrop.doom.tools.exception,
		net.mtrop.doom.tools.gui,
		net.mtrop.doom.tools.gui.apps,
		net.mtrop.doom.tools.gui.apps.data,
		net.mtrop.doom.tools.gui.managers,
		net.mtrop.doom.tools.gui.managers.parsing,
		net.mtrop.doom.tools.gui.managers.settings,
		net.mtrop.doom.tools.gui.swing,
		net.mtrop.doom.tools.gui.swing.panels,
		net.mtrop.doom.tools.gui.swing.panels.settings,
		net.mtrop.doom.tools.struct,
		net.mtrop.doom.tools.struct.swing,
		net.mtrop.doom.tools.struct.util,
		net.mtrop.doom.tools.wadmerge,
		net.mtrop.doom.tools.wadscript,
		net.mtrop.doom.tools.wtexport
		"
	/>
	
	<import file="build-import.xml" />
	<import file="build-dependencies.xml" />
	<import file="build-shell.xml" />	
	
	<!-- Versions -->
	<property name="wadmerge.version" value="${build.version}" />
	<property name="wswantbl.version" value="${build.version}" />
	<property name="wadtex.version" value="${build.version}" />
	<property name="wtexscan.version" value="${build.version}" />
	<property name="wtexport.version" value="${build.version}" />
	<property name="wadscript.version" value="${build.version}" />
	<property name="decohack.version" value="${build.version}" />
	<property name="dmxconv.version" value="${build.version}" />
	<property name="dimgconv.version" value="${build.version}" />
	<property name="doommake.version" value="${build.version}" />
	<property name="doomfetch.version" value="${build.version}" />

	
	<!-- Filenames -->
	<property name="build.versions.dir" value="${build.dir}/versions" />
	<property name="build.installer.dir" value="${build.dir}/installer" />
	<property name="jar.dist.filename" value="${project.archive}-jar-${build.version.number}.zip" />
	<property name="zip.dist.filename" value="${project.archive}-cmd-${build.version.number}.zip" />
	<property name="tar.dist.filename" value="${project.archive}-bash-${build.version.number}.tar.gz" />
	<property name="installer.dist.name" value="${project.archive}-setup-${build.version.number}" />
	<property name="installer.jre.dist.name" value="${project.archive}-setup-jre-${build.version.number}" />

	<target name="clean.dist" description="Cleans up the distributables folder.">
		<delete dir="${dist.dir}" includeemptydirs="true" casesensitive="false" /> 
	</target>

	<target name="init.dist" depends="clean.dist">
		<mkdir dir="${dist.dir}" />
	</target>

	<target name="clean.versions" description="Cleans up the distributables folder.">
		<delete dir="${build.versions.dir}" includeemptydirs="true" casesensitive="false" /> 
	</target>

	<target name="init.versions" depends="clean.versions">
		<mkdir dir="${build.versions.dir}" />
		<echo file="${build.versions.dir}/doomtools.version" message="${build.version.number}" />
		<echo file="${build.versions.dir}/json.version" message="${json.lib.version}" />
		<echo file="${build.versions.dir}/doom.version" message="${doom.lib.version}" />
		<echo file="${build.versions.dir}/rookscript.version" message="${rookscript.lib.version}" />
		<echo file="${build.versions.dir}/rookscript-desktop.version" message="${rookscript.desktop.lib.version}" />
		<echo file="${build.versions.dir}/flatlaf.version" message="${flatlaf.lib.version}" />
		<echo file="${build.versions.dir}/rsyntaxtextarea.version" message="${rsyntaxtextarea.lib.version}" />
		<echo file="${build.versions.dir}/autocomplete.version" message="${autocomplete.lib.version}" />
		<echo file="${build.versions.dir}/commonmark.version" message="${commonmark.lib.version}" />
		<echo file="${build.versions.dir}/jsoup.version" message="${jsoup.lib.version}" />
		
		<echo file="${build.versions.dir}/wadmerge.version" message="${wadmerge.version}" />
		<echo file="${build.versions.dir}/wswantbl.version" message="${wswantbl.version}" />
		<echo file="${build.versions.dir}/wadtex.version" message="${wadtex.version}" />
		<echo file="${build.versions.dir}/wtexscan.version" message="${wtexscan.version}" />
		<echo file="${build.versions.dir}/wtexport.version" message="${wtexport.version}" />
		<echo file="${build.versions.dir}/wadscript.version" message="${wadscript.version}" />
		<echo file="${build.versions.dir}/decohack.version" message="${decohack.version}" />
		<echo file="${build.versions.dir}/dmxconv.version" message="${dmxconv.version}" />
		<echo file="${build.versions.dir}/dimgconv.version" message="${dimgconv.version}" />
		<echo file="${build.versions.dir}/doommake.version" message="${doommake.version}" />
		<echo file="${build.versions.dir}/doomfetch.version" message="${doomfetch.version}" />
	</target>

	<target name="javadoc" depends="init.docs" description="Builds the Java documentation.">
        <javadoc access="protected" 
        	additionalparam="-J-Xmx512m  " author="true" 
        	classpath="${project.classpath}${path.separator}${bin.dir}" 
        	doctitle="${project.javadoc.title}" 
        	sourcepath="${src.dir}" 
        	packagenames="${project.javadoc.packages}"
        	destdir="${docs.dir}" 
        	splitindex="true" 
        	use="true" 
        	version="true" 
        	nodeprecated="false" 
        	nodeprecatedlist="false" 
        	noindex="false" 
        	nonavbar="false" 
        	notree="false"
    		>
            <link href="https://docs.oracle.com/en/java/javase/11/docs/api/"/>
        </javadoc>
    </target>	

	<macrodef name="jar-lib">
		<attribute name="destfile" />
		<attribute name="jar" />
		<attribute name="update" default="false" />
		<sequential>
			<jar destfile="@{destfile}" update="@{update}" filesetmanifest="skip">
				<zipfileset src="@{jar}">
					<include name="**/*.class" />
					<include name="**/*.properties" />
					<include name="**/*.xml" />
					<include name="**/*.dtd" />
					<include name="**/*.dll" />
					<exclude name="module-info.class" />
				</zipfileset>
			</jar>
		</sequential>
	</macrodef>
	
	<target name="jar.one" depends="init.jar, compile, init.versions">
		<jar-lib destfile="${jar.dir}/${jar.filename}" jar="${dependencies.dir}/${json.jar}" />
		<jar-lib destfile="${jar.dir}/${jar.filename}" jar="${dependencies.dir}/${doom.jar}"               update="true" />
		<jar-lib destfile="${jar.dir}/${jar.filename}" jar="${dependencies.dir}/${rookscript.jar}"         update="true" />
		<jar-lib destfile="${jar.dir}/${jar.filename}" jar="${dependencies.dir}/${rookscript.desktop.jar}" update="true" />
		<jar-lib destfile="${jar.dir}/${jar.filename}" jar="${dependencies.dir}/${rsyntaxtextarea.jar}"    update="true" />
		<jar-lib destfile="${jar.dir}/${jar.filename}" jar="${dependencies.dir}/${autocomplete.jar}"       update="true" />
		<jar-lib destfile="${jar.dir}/${jar.filename}" jar="${dependencies.dir}/${commonmark.jar}"         update="true" />
		<jar-lib destfile="${jar.dir}/${jar.filename}" jar="${dependencies.dir}/${flatlaf.jar}"            update="true" />
		<jar-lib destfile="${jar.dir}/${jar.filename}" jar="${dependencies.dir}/${jsoup.jar}"              update="true" />
		<jar destfile="${jar.dir}/${jar.filename}" basedir="${bin.dir}" update="true" />
		<jar destfile="${jar.dir}/${jar.filename}" update="true">
			<zipfileset dir="${build.dir}/versions" prefix="net/mtrop/doom/tools/" />
		</jar>
	</target>

	<target name="dependency.json">
		<github-dl repository="BlackRookSoftware/JSON" tag="${json.tag}" file="${json.jar}" dest="${dependencies.dir}" />
		<github-dl repository="BlackRookSoftware/JSON" tag="${json.tag}" file="${json.jar.src}" dest="${dependencies.dir}" />
	</target>

	<target name="dependency.doom">
		<github-dl repository="MTrop/DoomStruct" tag="${doom.tag}" file="${doom.jar}" dest="${dependencies.dir}" />
		<github-dl repository="MTrop/DoomStruct" tag="${doom.tag}" file="${doom.jar.src}" dest="${dependencies.dir}" />
	</target>
	
	<target name="dependency.rookscript">
		<github-dl repository="BlackRookSoftware/RookScript" tag="${rookscript.tag}" file="${rookscript.jar}" dest="${dependencies.dir}" />
		<github-dl repository="BlackRookSoftware/RookScript" tag="${rookscript.tag}" file="${rookscript.jar.src}" dest="${dependencies.dir}" />
	</target>
	
	<target name="dependency.rookscript.desktop">
		<github-dl repository="BlackRookSoftware/RookScript-Desktop" tag="${rookscript.desktop.tag}" file="${rookscript.desktop.jar}" dest="${dependencies.dir}" />
		<github-dl repository="BlackRookSoftware/RookScript-Desktop" tag="${rookscript.desktop.tag}" file="${rookscript.desktop.jar.src}" dest="${dependencies.dir}" />
	</target>

	<target name="dependency.flatlaf">
		<maven-jar-dl group-path="com/formdev" artifact="flatlaf" version="${flatlaf.lib.version}" />
		<maven-jar-sources-dl group-path="com/formdev" artifact="flatlaf" version="${flatlaf.lib.version}" />
	</target>

	<target name="dependency.rsyntaxtextarea">
		<maven-jar-dl group-path="com/fifesoft" artifact="rsyntaxtextarea" version="${rsyntaxtextarea.lib.version}" />
		<maven-jar-sources-dl group-path="com/fifesoft" artifact="rsyntaxtextarea" version="${rsyntaxtextarea.lib.version}" />
	</target>
	
	<target name="dependency.autocomplete">
		<maven-jar-dl group-path="com/fifesoft" artifact="autocomplete" version="${autocomplete.lib.version}" />
		<maven-jar-sources-dl group-path="com/fifesoft" artifact="autocomplete" version="${autocomplete.lib.version}" />
	</target>
	
	<target name="dependency.commonmark">
		<maven-jar-dl group-path="org/commonmark" artifact="commonmark" version="${commonmark.lib.version}" />
		<maven-jar-sources-dl group-path="org/commonmark" artifact="commonmark" version="${commonmark.lib.version}" />
	</target>
	
	<target name="dependency.jsoup">
		<maven-jar-dl group-path="org/jsoup" artifact="jsoup" version="${jsoup.lib.version}" />
		<maven-jar-sources-dl group-path="org/jsoup" artifact="jsoup" version="${jsoup.lib.version}" />
	</target>

	<target name="dependencies" depends="
		init.dependencies, 
		dependency.json, 
		dependency.doom, 
		dependency.rookscript,
		dependency.rookscript.desktop, 
		dependency.flatlaf, 
		dependency.rsyntaxtextarea, 
		dependency.autocomplete, 
		dependency.commonmark, 
		dependency.jsoup, 
		dependency.properties
	" description="Downloads and compiles the dependencies.">
	</target>

	<property name="jvm.options.common" value="-Xms64M -Xmx768M" />

	<target name="scripts.gui.exe.build" if="natives.windows.dir">
	</target>

	<target name="scripts.gui.exe" if="natives.windows.dir" depends="init.dist, scripts.gui.exe.build">
		<exec executable="make" dir="${natives.windows.dir}" failonerror="true">
			<arg line="clean" />
		</exec>
		<exec executable="make" dir="${natives.windows.dir}" failonerror="true">
		</exec>
		<copy overwrite="false" todir="${resource.dir}/shell/exe">
			<fileset dir="${natives.windows.dir}/dist" />
		</copy>
	</target>

	<target name="scripts" depends="scripts.gui.exe" description="Creates application shell scripts.">
		<!-- DoomTools -->
		<shell-cmd  name="doomtools"       todir="${build.dir}/shell/cmd"  options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.DoomToolsMain" />
		<shell-bash name="doomtools"       todir="${build.dir}/shell/bash" options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.DoomToolsMain" />
		<!-- WadMerge -->
		<shell-cmd  name="wadmerge"        todir="${build.dir}/shell/cmd"  options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.WadMergeMain" />
		<shell-bash name="wadmerge"        todir="${build.dir}/shell/bash" options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.WadMergeMain" />
		<!-- WSWANTBL -->
		<shell-cmd  name="wswantbl"        todir="${build.dir}/shell/cmd"  options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.WSwAnTablesMain" />
		<shell-bash name="wswantbl"        todir="${build.dir}/shell/bash" options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.WSwAnTablesMain" />
		<!-- WADTex -->
		<shell-cmd  name="wadtex"          todir="${build.dir}/shell/cmd"  options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.WADTexMain" />
		<shell-bash name="wadtex"          todir="${build.dir}/shell/bash" options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.WADTexMain" />
		<!-- WTexScan -->
		<shell-cmd  name="wtexscan"        todir="${build.dir}/shell/cmd"  options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.WTexScanMain" />
		<shell-bash name="wtexscan"        todir="${build.dir}/shell/bash" options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.WTexScanMain" />
		<!-- WTexport -->
		<shell-cmd  name="wtexport"        todir="${build.dir}/shell/cmd"  options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.WTExportMain" />
		<shell-bash name="wtexport"        todir="${build.dir}/shell/bash" options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.WTExportMain" />
		<!-- WadScript -->
		<shell-cmd  name="wadscript"       todir="${build.dir}/shell/cmd"  options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.WadScriptMain" />
		<shell-bash name="wadscript"       todir="${build.dir}/shell/bash" options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.WadScriptMain" />
		<!-- DecoHack -->
		<shell-cmd  name="decohack"        todir="${build.dir}/shell/cmd"  options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.DecoHackMain" />
		<shell-bash name="decohack"        todir="${build.dir}/shell/bash" options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.DecoHackMain" />
		<!-- DMXConv -->
		<shell-cmd  name="dmxconv"         todir="${build.dir}/shell/cmd"  options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.DMXConvertMain" />
		<shell-bash name="dmxconv"         todir="${build.dir}/shell/bash" options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.DMXConvertMain" />
		<!-- DImgConv -->
		<shell-cmd  name="dimgconv"        todir="${build.dir}/shell/cmd"  options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.DoomImageConvertMain" />
		<shell-bash name="dimgconv"        todir="${build.dir}/shell/bash" options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.DoomImageConvertMain" />
		<!-- DoomFetch -->
		<shell-cmd  name="doomfetch"       todir="${build.dir}/shell/cmd"  options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.DoomFetchMain" />
		<shell-bash name="doomfetch"       todir="${build.dir}/shell/bash" options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.DoomFetchMain" />
		<!-- DoomMake -->
		<shell-cmd  name="doommake"        todir="${build.dir}/shell/cmd"  options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.DoomMakeMain" />
		<shell-bash name="doommake"        todir="${build.dir}/shell/bash" options="${jvm.options.common}" mainclass="net.mtrop.doom.tools.DoomMakeMain" />
		<!-- RookScript -->
		<shell-cmd  name="rookscript"      todir="${build.dir}/shell/cmd"  options="${jvm.options.common}" mainclass="com.blackrook.rookscript.tools.ScriptExecutor" />
		<shell-bash name="rookscript"      todir="${build.dir}/shell/bash" options="${jvm.options.common}" mainclass="com.blackrook.rookscript.tools.ScriptExecutor" />
		<!-- Other -->
		<shell-cmd  name="doomtools-shell" todir="${build.dir}/shell/cmd"  src="${shell.dir}/cmd/doomtools-shell.cmd" />
		<!-- WIN32 Natives -->
		<copy todir="${build.dir}/shell/cmd">
			<fileset dir="${resource.dir}/shell/exe" />
		</copy>
	</target>

	<target name="dist.jar" depends="init.dist, jar.one" description="Build JAR distribution.">
		<zip destfile="${dist.dir}/${jar.dist.filename}" compress="true">
			<zipfileset file="${jar.dir}/${jar.filename}" />
			<zipfileset refid="fileset.documents" prefix="docs" />
			<zipfileset dir="${resource.dir}/docs" prefix="docs" />
		</zip>
	</target>	

	<target name="dist.cmd" depends="jar.one, scripts, init.dist" description="Build CMD distribution.">
		<zip destfile="${dist.dir}/${zip.dist.filename}" compress="true">
			<zipfileset file="${jar.dir}/${jar.filename}" prefix="jar" />
			<zipfileset dir="${build.dir}/shell/cmd" />
			<zipfileset refid="fileset.documents" prefix="docs" />
			<zipfileset file="images/doomtools-logo.ico" prefix="docs" />
			<zipfileset dir="${resource.dir}/docs" prefix="docs" />
		</zip>
	</target>

	<target name="dist.bash" depends="jar.one, scripts, init.dist" description="Build Bash distribution.">
		<tar destfile="${dist.dir}/${tar.dist.filename}" compression="gzip">
			<zipfileset file="${jar.dir}/${jar.filename}" prefix="jar" />
			<tarfileset dir="${build.dir}/shell/bash" filemode="755" />
			<tarfileset refid="fileset.documents" prefix="docs" />
			<zipfileset file="images/doomtools-logo.ico" prefix="docs" />
			<tarfileset dir="${resource.dir}/docs" prefix="docs" />
		</tar>
	</target>

	<target name="dist.installer.copy" depends="jar.one, scripts">
		<delete dir="${build.installer.dir}" failonerror="false" />
		<mkdir dir="${build.installer.dir}"/>
		<mkdir dir="${build.installer.dir}/docs"/>
		<mkdir dir="${build.installer.dir}/jar"/>
		<copy todir="${build.installer.dir}">
			<fileset dir="${resource.dir}/shell/exe" />
			<fileset dir="${build.dir}/shell/cmd" />
		</copy>
		<copy todir="${build.installer.dir}/docs">
			<fileset dir="${resource.dir}/docs"/>
			<fileset file="README.md" />
			<fileset file="LICENSE.txt" />
		</copy>
		<copy todir="${build.installer.dir}/jar">
			<fileset file="${jar.dir}/${jar.filename}" />
		</copy>
	</target>
	
	<target name="dist.installer.dirs.exist">
		<condition property="dist.installer.is.available">
			<and>
				<available file="${inno.setup.dir}" />
			</and>
		</condition>
		<condition property="dist.installer.jre.is.available">
			<and>
				<available file="${inno.setup.dir}" />
				<available file="${embedded.jre.source.dir}" />
			</and>
		</condition>
		<echoproperties />
	</target>
	
	<target name="dist.installer.compile" if="dist.installer.is.available">
		<exec executable="${inno.setup.dir}/ISCC.exe" failonerror="true">
			<arg line="/DSrcDirectory=${user.dir}\${build.dir}\installer" />
			<arg line="/DSrcLicensePath=${user.dir}\${build.dir}\installer\docs\LICENSE.txt" />
			<arg line="/DBaseOutputFilename=${installer.dist.name}" />
			<arg line="/DDTAppVersion=${build.date}" />
			<arg line="/O${dist.dir}" />
			<arg line="inno\doomtools.iss" />
		</exec>
	</target>

	<target name="dist.installer.jre.compile" if="dist.installer.jre.is.available">
		<exec executable="${inno.setup.dir}/ISCC.exe" failonerror="true">
			<arg line="/DSrcDirectory=${user.dir}\${build.dir}\installer" />
			<arg line="/DSrcJREDirectory=${embedded.jre.source.dir}" />
			<arg line="/DSrcLicensePath=${user.dir}\${build.dir}\installer\docs\LICENSE.txt" />
			<arg line="/DBaseOutputFilename=${installer.jre.dist.name}" />
			<arg line="/DDTAppVersion=${build.date}" />
			<arg line="/O${dist.dir}" />
			<arg line="inno\doomtools.iss" />
		</exec>
	</target>

	<target name="dist.installer" depends="init.dist, dist.installer.copy, dist.installer.dirs.exist, dist.installer.compile, dist.installer.jre.compile" description="Build available Windows installer distributions (requires Inno Setup Path).">
	</target>	
	
	<target name="dist" depends="dist.jar, dist.bash, dist.cmd, dist.installer" description="Builds all distributions and installers.">
	</target>

	<target name="deploy.cmd" if="deploy.dir" depends="dist.cmd" description="Deploys the CMD distribution to a directory, CLEANING THE DIRECTORY FIRST. USE CAUTION (requires deploy directory path).">
		<delete dir="${deploy.dir}" failonerror="false" />
		<mkdir dir="${deploy.dir}" />
		<unzip src="${dist.dir}/${zip.dist.filename}" dest="${deploy.dir}" />
	</target>

	<target name="deploy.bash" if="deploy.dir" depends="dist.bash" description="Deploys the Bash distribution to a directory, CLEANING THE DIRECTORY FIRST. USE CAUTION (requires deploy directory path).">
		<delete dir="${deploy.dir}" failonerror="false" />
		<mkdir dir="${deploy.dir}" />
		<!-- Untar does not preserve file permissions for some dumb reason, so call TAR itself. -->
		<exec executable="tar" failonerror="true">
			<arg line="-zxf" />
			<arg line="${dist.dir}/${tar.dist.filename}" />
			<arg line="-C ${deploy.dir}" />
		</exec>
	</target>

	<target name="deploy.jar" if="deploy.dir" depends="jar.one" description="Deploys the JAR distribution to a directory.">
		<copy todir="${deploy.dir}/jar">
			<fileset file="${jar.dir}/${jar.filename}" />
		</copy>
	</target>

</project>